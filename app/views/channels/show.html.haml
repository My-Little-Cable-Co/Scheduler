%p#notice
  = notice

%h2
  = @channel.long_name
  %small= link_to 'Edit', edit_channel_path(@channel)

#channel-display
  #airings
    %h4
      Airings
      = link_to 'New', new_channel_airing_path(@channel)
    %table
      %thead
        %th Show
        %th Summary
      %tbody
        - @channel.airings.order(:timeslot).each do |airing|
          %tr{class: cycle('even', 'odd')}
            %td= airing.show.title
            %td
              .airing.summary
                - if airing.recurrence
                  - recurrence_info = airing.recurrence.to_h
                  .days-of-week
                    %span.day-of-week{class: recurrence_info[:on].include?('monday') ? 'active' : ''} M
                    &nbsp;
                    %span.day-of-week{class: recurrence_info[:on].include?('tuesday') ? 'active' : ''} Tu
                    &nbsp;
                    %span.day-of-week{class: recurrence_info[:on].include?('wednesday') ? 'active' : ''} W
                    &nbsp;
                    %span.day-of-week{class: recurrence_info[:on].include?('thursday') ? 'active' : ''} Th
                    &nbsp;
                    %span.day-of-week{class: recurrence_info[:on].include?('friday') ? 'active' : ''} F
                    &nbsp;
                    %span.day-of-week{class: recurrence_info[:on].include?('saturday') ? 'active' : ''} Sa
                    &nbsp;
                    %span.day-of-week{class: recurrence_info[:on].include?('sunday') ? 'active' : ''} Su
                  .airtime-info
                    .timeslot= "#{Airing::TIMESLOT_EMOJI[airing.timeslot]} #{airing.timeslot}"
                    .runtime= "⏳ #{airing.humanized_block_length}"
                  .relevancy-dates
                    %small.starts= recurrence_info.fetch(:starts, Date.new(1900,1,1)).strftime('%F')
                    %span &nbsp;–&nbsp;
                    %small.until= recurrence_info.fetch(:until, Date.new(2100,12,31)).strftime('%F')
                - else
                  No recurrence data

  #channel-schedule
    %table{id: "channel-#{@channel.number}-schedule-week-starting-#{@days[0].strftime('%F')}"}
      %caption
        - previous_week_start = (@days[0] - 1.week).strftime('%F')
        - next_week_start = (@days[0] + 1.week).strftime('%F')
        - if !@days.include?(Date.today)
          = link_to('This Week', '?')
        = link_to('<<', "?start_date='#{previous_week_start}'")
        = "Week of #{@days[0].strftime('%F')}"
        = link_to('>>', "?start_date='#{next_week_start}'")
      %thead
        %th
        - @days.each do |day|
          %th= day.strftime('%a %D')
      %tbody
        - Airing::TIMESLOTS.each_with_index do |timeslot, index|
          %tr.half-hour
            - color = cycle('green', 'yellow', 'blue', 'red', name: 'colors')
            %td{class: color}= timeslot
            - @days.each do |day|
              - listing = @listings.fetch(day, []).select{|l| l.timeslot == timeslot}[0]
              - if listing
                - total_timeslots = @listings.fetch(day, []).select{|l| l.parent_listing_id == listing.id || (listing.parent_listing_id.present? && l.parent_listing_id == listing.parent_listing_id && l.id != listing.id)}.length + 1
                - if listing.parent_listing_id.nil? || index == 0 # The first timeslot of the day should display even if it is a continuation
                  %td{class: color, rowspan: total_timeslots}= listing&.display || 'TBD'
              - else
                %td{class: color} TBD
